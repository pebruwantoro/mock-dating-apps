// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pebruwantoro/technical_test_dealls/usecase (interfaces: UsecaseInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/usecase.go -package=mocks . UsecaseInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/pebruwantoro/technical_test_dealls/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecaseInterface is a mock of UsecaseInterface interface.
type MockUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseInterfaceMockRecorder
	isgomock struct{}
}

// MockUsecaseInterfaceMockRecorder is the mock recorder for MockUsecaseInterface.
type MockUsecaseInterfaceMockRecorder struct {
	mock *MockUsecaseInterface
}

// NewMockUsecaseInterface creates a new mock instance.
func NewMockUsecaseInterface(ctrl *gomock.Controller) *MockUsecaseInterface {
	mock := &MockUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseInterface) EXPECT() *MockUsecaseInterfaceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUsecaseInterface) Login(ctx context.Context, request dto.LoginRequest) (dto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, request)
	ret0, _ := ret[0].(dto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUsecaseInterfaceMockRecorder) Login(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUsecaseInterface)(nil).Login), ctx, request)
}

// SignUp mocks base method.
func (m *MockUsecaseInterface) SignUp(ctx context.Context, request dto.SignUpRequest) (dto.SignUpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, request)
	ret0, _ := ret[0].(dto.SignUpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUsecaseInterfaceMockRecorder) SignUp(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUsecaseInterface)(nil).SignUp), ctx, request)
}

// Swipe mocks base method.
func (m *MockUsecaseInterface) Swipe(ctx context.Context, request dto.SwipeRequest) (dto.SwipeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Swipe", ctx, request)
	ret0, _ := ret[0].(dto.SwipeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Swipe indicates an expected call of Swipe.
func (mr *MockUsecaseInterfaceMockRecorder) Swipe(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Swipe", reflect.TypeOf((*MockUsecaseInterface)(nil).Swipe), ctx, request)
}
