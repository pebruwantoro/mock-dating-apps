// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pebruwantoro/technical_test_dealls/repository (interfaces: RepositoryInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository.go -package=mocks . RepositoryInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repository "github.com/pebruwantoro/technical_test_dealls/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateSwipe mocks base method.
func (m *MockRepositoryInterface) CreateSwipe(ctx context.Context, input repository.Swipe) (repository.Swipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSwipe", ctx, input)
	ret0, _ := ret[0].(repository.Swipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSwipe indicates an expected call of CreateSwipe.
func (mr *MockRepositoryInterfaceMockRecorder) CreateSwipe(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSwipe", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateSwipe), ctx, input)
}

// CreateUser mocks base method.
func (m *MockRepositoryInterface) CreateUser(ctx context.Context, input repository.User) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, input)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryInterfaceMockRecorder) CreateUser(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateUser), ctx, input)
}

// GetSwipeByUserIdAndTargetId mocks base method.
func (m *MockRepositoryInterface) GetSwipeByUserIdAndTargetId(ctx context.Context, userId, targetId string) (repository.Swipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwipeByUserIdAndTargetId", ctx, userId, targetId)
	ret0, _ := ret[0].(repository.Swipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwipeByUserIdAndTargetId indicates an expected call of GetSwipeByUserIdAndTargetId.
func (mr *MockRepositoryInterfaceMockRecorder) GetSwipeByUserIdAndTargetId(ctx, userId, targetId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwipeByUserIdAndTargetId", reflect.TypeOf((*MockRepositoryInterface)(nil).GetSwipeByUserIdAndTargetId), ctx, userId, targetId)
}

// GetUserByEmail mocks base method.
func (m *MockRepositoryInterface) GetUserByEmail(ctx context.Context, email string) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockRepositoryInterfaceMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockRepositoryInterface)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockRepositoryInterface) GetUserByID(ctx context.Context, id string) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryInterfaceMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetUserByID), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockRepositoryInterface) GetUserByUsername(ctx context.Context, username string) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockRepositoryInterfaceMockRecorder) GetUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockRepositoryInterface)(nil).GetUserByUsername), ctx, username)
}

// UpdateSwipe mocks base method.
func (m *MockRepositoryInterface) UpdateSwipe(ctx context.Context, input repository.Swipe) (repository.Swipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSwipe", ctx, input)
	ret0, _ := ret[0].(repository.Swipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSwipe indicates an expected call of UpdateSwipe.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateSwipe(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSwipe", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateSwipe), ctx, input)
}

// UpdateUser mocks base method.
func (m *MockRepositoryInterface) UpdateUser(ctx context.Context, input repository.User) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, input)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateUser(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateUser), ctx, input)
}
